--- doc/cronolog.1m	3 May 2002 00:44:37 -0000	1.1.1.1
+++ doc/cronolog.1m	1 Apr 2003 09:08:26 -0000	1.2
@@ -94,40 +94,47 @@
 specifies the period explicitly as an optional digit string followed
 by one of units: \fBseconds\fP, \fBminutes\fP, \fBhours\fP,
 \fBdays\fP, \fBweeks\fP or \fBmonths\fP.  The count cannot be greater
 than the number of units in the next larger unit, i.e. you cannot
 specify "120 minutes", and for seconds, minutes and hours the count
 must be a factor of the next higher unit, i.e you can specify 1, 2, 3,
 4, 5, 6, 10, 15, 20 or 30 minutes but not say 7 minutes.
 .\"
 .IP "-d \fIPERIOD\fP"
 .IP "--delay=\fIPERIOD\fP"
 specifies the delay from the start of the period before the log file
 is rolled over.  For example specifying (explicitly or implicitly) a
 period of 15 minutes and a delay of 5 minutes results in the log files
 being rotated at five past, twenty past, twentyfive to and ten to each
 hour.   The delay cannot be longer than the period.
 .\"
 .IP "-o"
 .IP "--once-only"
 create single output log from template, which is not rotated.
 .\"
+.IP "-c PROG"
+.IP "--command=PROG"
+run command PROG (with filename appended onto it) after each file
+is complete. The default for PROG is "nice gzip -9 <filename>",
+which compresses a file as tightly as possible at a low priority.
+PROG is run in the background.
+.\"
 .IP "-x FILE"
 .IP "--debug=\fIFILE\fP"
 write debug messages to 
 .I FILE
 or to the standard error stream if 
 .I FILE 
 is "-".  (See the README file for more details.)
 .\"
 .IP "-s TIME"
 .IP "--start-time=\fITIME\fP"
 pretend that the starting time is
 .I TIME
 (for debugging purposes).
 .I TIME should be something like "DD MONTH YYYY HH:MM:SS" (the day and
 month are reversed if the american option is specified).  If the
 seconds are omitted then they are taken as zero and if the hours and
 minutes are omitted then the time of day is taken as 00:00:00
 (i.e. midnight).  The day, month and year can be separated by spaces,
 hyphens (-) or solidi (/).
 .\"
--- src/cronolog.c	3 May 2002 00:44:36 -0000	1.1.1.1
+++ src/cronolog.c	27 Jul 2004 00:30:20 -0000	1.4
@@ -65,142 +65,158 @@
  * as the original contributor of this module.  All other licensing
  * and usage conditions are those of the Apache Software Foundation.
  *
  * Originally written by Andrew Ford <A.Ford@ford-mason.co.uk>
  *
  * cronolog is loosly based on the rotatelogs program, which is part of the
  * Apache package written by Ben Laurie <ben@algroup.co.uk>
  *
  * The argument to this program is the log file name template as an
  * strftime format string.  For example to generate new error and
  * access logs each day stored in subdirectories by year, month and day add
  * the following lines to the httpd.conf:
  *
  *	TransferLog "|/www/etc/cronolog /www/logs/%Y/%m/%d/access.log"
  *	ErrorLog    "|/www/etc/cronolog /www/logs/%Y/%m/%d/error.log"
  *
  * The option "-x file" specifies that debugging messages should be
  * written to "file" (e.g. /dev/console) or to stderr if "file" is "-".
  */
 
+
+#undef  _FILE_OFFSET_BITS       /* to clear compilation warning */
+#define _FILE_OFFSET_BITS 64    /* enable large files */
+#include <sys/types.h>          /* make sure we get large file types */
+
 #include "cronoutils.h"
 #include "getopt.h"
 
 
 /* Forward function declaration */
 
 int	new_log_file(const char *, const char *, mode_t, const char *,
 		     PERIODICITY, int, int, char *, size_t, time_t, time_t *);
 
 
 /* Definition of version and usage messages */
 
 #ifndef _WIN32
 #define VERSION_MSG   	PACKAGE " version " VERSION "\n"
 #else
 #define VERSION_MSG      "cronolog version 0.1\n"
 #endif
 
 
 #define USAGE_MSG 	"usage: %s [OPTIONS] logfile-spec\n" \
 			"\n" \
 			"   -H NAME,   --hardlink=NAME maintain a hard link from NAME to current log\n" \
 			"   -S NAME,   --symlink=NAME  maintain a symbolic link from NAME to current log\n" \
 			"   -P NAME,   --prev-symlink=NAME  maintain a symbolic link from NAME to previous log\n" \
 			"   -l NAME,   --link=NAME     same as -S/--symlink\n" \
 			"   -h,        --help          print this help, then exit\n" \
 			"   -p PERIOD, --period=PERIOD set the rotation period explicitly\n" \
 			"   -d DELAY,  --delay=DELAY   set the rotation period delay\n" \
 			"   -o,        --once-only     create single output log from template (not rotated)\n" \
 			"   -x FILE,   --debug=FILE    write debug messages to FILE\n" \
 			"                              ( or to standard error if FILE is \"-\")\n" \
+			"   -c PROG,   --command=PROG Run command on files after closing them using PROG\n" \
 			"   -a,        --american         American date formats\n" \
 			"   -e,        --european         European date formats (default)\n" \
 			"   -s,    --start-time=TIME   starting time\n" \
 			"   -z TZ, --time-zone=TZ      use TZ for timezone\n" \
 			"   -V,      --version         print version number, then exit\n"
 
 
 /* Definition of the short and long program options */
 
-char          *short_options = "ad:eop:s:z:H:P:S:l:hVx:";
+char          *short_options = "ac?d:eop:s:z:H:P:S:l:hVx:";
 
 #ifndef _WIN32
 struct option long_options[] =
 {
     { "american",	no_argument,		NULL, 'a' },
     { "european",	no_argument,		NULL, 'e' },
+    { "command",	optional_argument,		NULL, 'c' },
     { "start-time", 	required_argument,	NULL, 's' },
     { "time-zone",  	required_argument,	NULL, 'z' },
     { "hardlink",  	required_argument, 	NULL, 'H' },
     { "symlink",   	required_argument, 	NULL, 'S' },
     { "prev-symlink",  	required_argument, 	NULL, 'P' },
     { "link",      	required_argument, 	NULL, 'l' },
     { "period",		required_argument,	NULL, 'p' },
     { "delay",		required_argument,	NULL, 'd' },
     { "once-only", 	no_argument,       	NULL, 'o' },
     { "help",      	no_argument,       	NULL, 'h' },
     { "version",   	no_argument,       	NULL, 'V' }
 };
 #endif
 
 /* Main function.
  */
 int
 main(int argc, char **argv)
 {
     PERIODICITY	periodicity = UNKNOWN;
     PERIODICITY	period_delay_units = UNKNOWN;
     int		period_multiple = 1;
     int		period_delay  = 0;
     int		use_american_date_formats = 0;
     char 	read_buf[BUFSIZE];
     char 	tzbuf[BUFSIZE];
     char	filename[MAX_PATH];
     char	*start_time = NULL;
     char	*template;
     char	*linkname = NULL;
     char	*prevlinkname = NULL;
+	char	*cflag = NULL;
     mode_t	linktype = 0;
     int 	n_bytes_read;
     int		ch;
     time_t	time_now;
     time_t	time_offset = 0;
     time_t	next_period = 0;
     int 	log_fd = -1;
 
 #ifndef _WIN32
     while ((ch = getopt_long(argc, argv, short_options, long_options, NULL)) != EOF)
 #else
     while ((ch = getopt(argc, argv, short_options)) != EOF)
 #endif        
     {
 	switch (ch)
 	{
 	case 'a':
 	    use_american_date_formats = 1;
 	    break;
 	    
 	case 'e':
 	    use_american_date_formats = 0;
 	    break;
 	    
+	case 'c':
+		if (optarg) {
+			cflag = optarg;
+		} else {
+			cflag = "nice gzip -9";
+		}
+   break;
+	    
 	case 's':
 	    start_time = optarg;
 	    break;
 
 	case 'z':
 	    sprintf(tzbuf, "TZ=%s", optarg);
 	    putenv(tzbuf);
 	    break;
 
 	case 'H':
 	    linkname = optarg;
 	    linktype = S_IFREG;
 	    break;
 
 	case 'l':
 	case 'S':
 	    linkname = optarg;
 #ifndef _WIN32
 	    linktype = S_IFLNK;
 #endif        
@@ -319,64 +334,81 @@
 	    exit(3);
 	}
 	if (errno == EINTR)
 	{
 	    continue;
 	}
 	else if (n_bytes_read < 0)
 	{
 	    exit(4);
 	}
 
 	time_now = time(NULL) + time_offset;
 	
 	/* If the current period has finished and there is a log file
 	 * open, close the log file
 	 */
 	if ((time_now >= next_period) && (log_fd >= 0))
 	{
 	    close(log_fd);
 	    log_fd = -1;
+
+		/* we can only get here is log_fd was set, so we can be sure
+			filename will be set too. */
+		if (cflag) {
+			char cmd[256];
+
+			if (strlen(cflag) + strlen(filename) < 250) {
+				sprintf(cmd, "%s \'%s\' &", cflag, filename);
+				DEBUG(("running command: %s\n", cmd));
+				system(cmd);
+			} else {
+				fprintf(stderr, "Could not run command. PROG + filename is longer than 250 characters.\n");
+			}
+		}
 	}
 	
 	/* If there is no log file open then open a new one.
 	 */
 	if (log_fd < 0)
 	{
 	    log_fd = new_log_file(template, linkname, linktype, prevlinkname,
 				  periodicity, period_multiple, period_delay,
 				  filename, sizeof (filename), time_now, &next_period);
 	}
 
 	DEBUG(("%s (%d): wrote message; next period starts at %s (%d) in %d secs\n",
 	       timestamp(time_now), time_now, 
 	       timestamp(next_period), next_period,
 	       next_period - time_now));
 
 	/* Write out the log data to the current log file.
 	 */
 	if (write(log_fd, read_buf, n_bytes_read) != n_bytes_read)
 	{
+	    /* don't die when out of disk, just keep trying to write */
+	    if (errno != ENOSPC) {
 	    perror(filename);
 	    exit(5);
 	}
     }
+    }
 
     /* NOTREACHED */
     return 1;
 }
 
 /* Open a new log file: determine the start of the current
  * period, generate the log file name from the template,
  * determine the end of the period and open the new log file.
  *
  * Returns the file descriptor of the new log file and also sets the
  * name of the file and the start time of the next period via pointers
  * supplied.
  */
 int
 new_log_file(const char *template, const char *linkname, mode_t linktype, const char *prevlinkname,
 	     PERIODICITY periodicity, int period_multiple, int period_delay,
 	     char *pfilename, size_t pfilename_len,
 	     time_t time_now, time_t *pnext_period)
 {
     time_t 	start_of_period;
--- src/cronoutils.c	3 May 2002 00:44:36 -0000	1.1.1.1
+++ src/cronoutils.c	3 May 2002 00:52:20 -0000	1.2
@@ -177,62 +177,73 @@
 		    exit(2);
 		}
 	    }
 	}
     }
 #ifndef CHECK_ALL_PREFIX_DIRS
     strcpy(lastpath, dirname);
 #endif
 }
 
 /* Create a hard or symbolic link to a filename according to the type specified.
  *
  * This function could do with more error checking! 
  */
 void
 create_link(char *pfilename, 
 	    const char *linkname, mode_t linktype,
 	    const char *prevlinkname)
 {
     struct stat		stat_buf;
+    int res;
     
-    if (stat(prevlinkname, &stat_buf) == 0)
-    {
-	unlink(prevlinkname);
+    if (prevlinkname) {
+	if (unlink(prevlinkname) != 0) {
+	    /* don't whine if it wasn't there anyway */
+	    if (errno != ENOENT) {
+		perror("Could not delete previous link");
     }
-    if (stat(linkname, &stat_buf) == 0)
-    {
+	}
+    }
+
 	if (prevlinkname) {
-	    rename(linkname, prevlinkname);
+	if (rename(linkname, prevlinkname) != 0) {
+	    perror("Could not move current link to previous link");
 	}
-	else {
-	    unlink(linkname);
 	}
+
+    if (unlink(linkname) != 0) {
+	/* don't whine if it wasn't there anyway */
+	if (errno != ENOENT) {
+	    perror("Could not unlink old link");
     }
+    }
+
 #ifndef _WIN32
-    if (linktype == S_IFLNK)
-    {
-	symlink(pfilename, linkname);
+    if (linktype == S_IFLNK) {
+	res = symlink(pfilename, linkname);
+    } else {
+	res = link(pfilename, linkname);
     }
-    else
-    {
-	link(pfilename, linkname);
+
+    if (res != 0) {
+	perror("Could not make link");
     }
 #else
     fprintf(stderr, "Creating link from %s to %s not supported", pfilename, linkname);
 #endif    
 }
 
 /* Examine the log file name specifier for strftime conversion
  * specifiers and determine the period between log files. 
  * Smallest period allowed is per minute.
  */
 PERIODICITY
 determine_periodicity(char *spec)
 {
     PERIODICITY	periodicity = ONCE_ONLY;
     char 	ch;
     
     DEBUG(("Determining periodicity of \"%s\"\n", spec));
     while ((ch = *spec++) != 0)
     {
 	if (ch == '%')
